import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration object: key becomes the filename and export name, value is the source path
const resources = {
  rendererHtml: path.resolve(__dirname, '../../sandbox-resources/html/markdown.html'),
  sandboxedJs: path.resolve(__dirname, '../../sandbox-resources/dist/sandboxed.js'),
};

const resourcesDir = path.resolve(__dirname, '../src/resources');
if (!fs.existsSync(resourcesDir)) {
  fs.mkdirSync(resourcesDir, { recursive: true });
}

function escapeForTemplate(content) {
  return content
    .replace(/\\/g, '\\\\')  // Escape backslashes
    .replace(/"/g, '\\"')    // Escape double quotes
    .replace(/`/g, '\\`')    // Escape template literals
    .replace(/\$\{/g, '\\${'); // Escape template literal expressions
}

function processResource(key, sourcePath) {
  try {
    const content = fs.readFileSync(sourcePath, 'utf8');
    const escapedContent = escapeForTemplate(content);
    
    const tsContent = `//this file is automatically generated

export const ${key} = \`${escapedContent}\`;
`;

    const outputPath = path.resolve(resourcesDir, `${key}.ts`);
    fs.writeFileSync(outputPath, tsContent, 'utf8');
    
    console.log(`Successfully updated ${key}.ts`);
  } catch (error) {
    console.error(`Error processing ${key}:`, error.message);
    throw error;
  }
}

try {
  // Process all resources
  Object.entries(resources).forEach(([key, sourcePath]) => {
    processResource(key, sourcePath);
  });
  
  console.log('All resources updated successfully');
} catch (error) {
  console.error('Error updating TypeScript files:', error.message);
  process.exit(1);
}